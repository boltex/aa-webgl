{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "felix.20241113233438.1",
      "vh": "Introduction"
    },
    {
      "gnx": "felix.20241118225416.1",
      "vh": "code",
      "children": [
        {
          "gnx": "felix.20241118225308.1",
          "vh": "Hello World",
          "children": [
            {
              "gnx": "felix.20241118225357.1",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241118225400.1",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241116232514.1",
          "vh": "Chapter3 Uniforms",
          "children": [
            {
              "gnx": "felix.20241113235415.1",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241113235430.1",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241116232737.1",
          "vh": "Chapter4-5 Attributes",
          "children": [
            {
              "gnx": "felix.20241116232737.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241116232737.3",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241117233253.1",
          "vh": "Chapter6 Elements Arrays",
          "children": [
            {
              "gnx": "felix.20241117233253.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241117233253.3",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241118225644.1",
          "vh": "Chapter8 Textures",
          "children": [
            {
              "gnx": "felix.20241118225644.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241124171038.1",
              "vh": "Asynchronous IIFE",
              "children": [
                {
                  "gnx": "felix.20241124171224.1",
                  "vh": "WebGL Program"
                },
                {
                  "gnx": "felix.20241118225644.3",
                  "vh": "main"
                }
              ]
            }
          ]
        },
        {
          "gnx": "felix.20241126223424.1",
          "vh": "Chapter 10 Vertex Array Objects (Start)",
          "children": [
            {
              "gnx": "felix.20241126223424.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241126223424.3",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241124205404.1",
          "vh": "Chapter 10 Vertex Array Objects (Done)",
          "children": [
            {
              "gnx": "felix.20241124205404.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241124205404.3",
              "vh": "main"
            }
          ]
        },
        {
          "gnx": "felix.20241201235534.1",
          "vh": "Chapter11 Sprite Sheets",
          "children": [
            {
              "gnx": "felix.20241201235534.2",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241201235534.3",
              "vh": "Asynchronous IIFE",
              "children": [
                {
                  "gnx": "felix.20241201235534.4",
                  "vh": "WebGL Program"
                },
                {
                  "gnx": "felix.20241201235534.5",
                  "vh": "main"
                }
              ]
            }
          ]
        },
        {
          "gnx": "felix.20241126234030.1",
          "vh": "Chapter 12 Texture Arrays",
          "children": [
            {
              "gnx": "felix.20241128003559.1",
              "vh": "gl sources"
            },
            {
              "gnx": "felix.20241128003543.1",
              "vh": "Asynchronous IIFE",
              "children": [
                {
                  "gnx": "felix.20241128003543.2",
                  "vh": "WebGL Program"
                },
                {
                  "gnx": "felix.20241128003543.3",
                  "vh": "main"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "gnx": "felix.20241113233458.1",
      "vh": "@clean src/main.ts",
      "children": [
        {
          "gnx": "felix.20241201235534.1"
        }
      ]
    }
  ],
  "tnodes": {
    "felix.20241113233438.1": "Andrew Adamson WebGL tutorials\n\nhttps://www.youtube.com/watch?v=-T6EbWCq99c&list=PLPbmjY2NVO_X1U1JzLxLDdRn4NmtxyQQo\n\n",
    "felix.20241118225416.1": "@language typescript\n",
    "felix.20241118225308.1": "@others\n\n",
    "felix.20241118225357.1": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nvoid main()\n{\n    gl_PointSize = 150.0;\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}`;\n\n",
    "felix.20241118225400.1": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link program');\n}\n\ngl.useProgram(program);\n\ngl.drawArrays(gl.POINTS, 0, 1);",
    "felix.20241116232514.1": "@others\n",
    "felix.20241113235415.1": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nuniform float uPointSize;\nuniform vec2 uPosition;\n\nvoid main()\n{\n    gl_PointSize = uPointSize;\n    gl_Position = vec4(uPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nout vec4 fragColor;\n\nuniform int uIndex;\nuniform vec4 uColors[3];\n\nvoid main()\n{\n    fragColor = uColors[uIndex];\n}`;\n\n",
    "felix.20241113235430.1": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n// VERTEX SHADER -> Get position and pont size uniforms locations and set their values\nconst uPositionLoc = gl.getUniformLocation(program, 'uPosition')!;\ngl.uniform2f(uPositionLoc, -0.3, 0.0);\n\nconst uPointSizeLoc = gl.getUniformLocation(program, 'uPointSize')!;\ngl.uniform1f(uPointSizeLoc, 100.0);\n\n// FRAGMENT SHADER -> Get index and colors uniforms locations and set their values\nconst uIndexLoc = gl.getUniformLocation(program, 'uIndex')!;\nconst uColorsLoc = gl.getUniformLocation(program, 'uColors')!;\n\ngl.uniform1i(uIndexLoc, 2);\ngl.uniform4fv(uColorsLoc, [\n    1.0, 0.0, 0.0, 1.0,\n    0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 1.0,\n]);\n\ngl.drawArrays(gl.POINTS, 0, 1);\n",
    "felix.20241116232737.1": "@others\n",
    "felix.20241116232737.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location = 1) in float aPointSize;\nlayout(location = 0) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n    vColor = aColor;\n    gl_PointSize = aPointSize;\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vec4(vColor, 1.0);\n}`;\n\n",
    "felix.20241116232737.3": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n// Attributes\nconst aPositionLoc = 0;\nconst aPointSizeLoc = 1;\nconst aColorLoc = 2;\n\ngl.vertexAttrib4f(aPositionLoc, 0, 0, 0, 1); // DEFAULT LOCATION\ngl.vertexAttrib1f(aPointSizeLoc, 50); // DEFAULT POINT SIZE\ngl.vertexAttrib4f(aColorLoc, 1, 0, 0, 1); // DEFAULT COLOR (RED)\n\n// * ALL IN SAME BUFFER AS FLOAT *\nconst bufferData = new Float32Array([\n    -0.3, 0.5, 100, 1, 0, 0,\n    0.3, -0.5, 10, 0, 1, 0,\n    0.8, 0.8, 50, 0, 0, 1,\n    0.4, -0.1, 70, 0.2, 0.5, 0.8,\n    0.1, 0.2, 20, 0.9, 0.2, 0.4,\n    0.4, 0.3, 30, 0.6, 0.6, 0.1\n]);\n\n// create 16 bits from floats\nconsole.log(\n    bufferData\n        .map((v: number) => Math.floor(v * (1 << 15)))\n        .reduce((c: string[], v: number) => [...c, v.toString(10).padStart(6)], [])\n        .join()\n);\n// * ALL IN SAME BUFFER AS SIGNED 16 BIT INT (-32767 to 32767, NOT 0-65536) *\nconst bufferData2 = new Int16Array([\n    -9831, 16384, 100, 32767, 0, 0,\n    9830, -16384, 10, 0, 32767, 0,\n    26214, 26214, 50, 0, 0, 32767,\n    13107, -3277, 70, 6553, 16384, 26214,\n    3276, 6553, 20, 29491, 6553, 13107,\n    13107, 9830, 30, 19660, 19660, 3276\n]);\n\n// create 8 bits from 16 bit\nconsole.log(\n    bufferData2\n        .map((v: number) => (v >> 8))\n        .reduce((c: string[], v: number) => [...c, v.toString(10).padStart(4)], [])\n        .join()\n);\n// * ALL IN SAME BUFFER AS SIGNED 8 BIT INT (-127 to 127, NOT 0-255) *\nconst bufferData3 = new Int8Array([\n    -39, 64, 100, 127, 0, 0,\n    38, -64, 10, 0, 127, 0,\n    102, 102, 50, 0, 0, 127,\n    51, -13, 70, 25, 64, 102,\n    12, 25, 20, 115, 25, 51,\n    51, 38, 30, 76, 76, 12\n]);\n\nconst buffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n// gl.bufferData(gl.ARRAY_BUFFER, bufferData, gl.STATIC_DRAW);\n// gl.bufferData(gl.ARRAY_BUFFER, bufferData2, gl.STATIC_DRAW);\ngl.bufferData(gl.ARRAY_BUFFER, bufferData3, gl.STATIC_DRAW);\n\n// Bind attributes: Match the layout in the buffer data\n// gl.vertexAttribPointer(aPositionLoc, 2, gl.FLOAT, false, 6 * 4, 0);\n// gl.vertexAttribPointer(aPointSizeLoc, 1, gl.FLOAT, false, 6 * 4, 2 * 4);\n// gl.vertexAttribPointer(aColorLoc, 3, gl.FLOAT, false, 6 * 4, 3 * 4);\n\n// gl.vertexAttribPointer(aPositionLoc, 2, gl.SHORT, true, 6 * 2, 0);\n// gl.vertexAttribPointer(aPointSizeLoc, 1, gl.SHORT, false, 6 * 2, 2 * 2);\n// gl.vertexAttribPointer(aColorLoc, 3, gl.SHORT, true, 6 * 2, 3 * 2);\n\ngl.vertexAttribPointer(aPositionLoc, 2, gl.BYTE, true, 6 * 1, 0);\ngl.vertexAttribPointer(aPointSizeLoc, 1, gl.BYTE, false, 6 * 1, 2 * 1);\ngl.vertexAttribPointer(aColorLoc, 3, gl.BYTE, true, 6 * 1, 3 * 1);\n\n// * SEPARATE BUFFERS *\n// const positionData = new Float32Array([\n//     -0.3, 0.5,\n//     0.3, -0.5,\n//     0.8, 0.8,\n//     0.4, -0.1,\n//     0.1, 0.2,\n//     0.4, 0.3\n// ]);\n// const pointSizeData = new Float32Array([\n//     100,\n//     10,\n//     50,\n//     70,\n//     20,\n//     30\n// ]);\n// const colorData = new Float32Array([\n//     1, 0, 0,\n//     0, 1, 0,\n//     0, 0, 1,\n//     0.2, 0.5, 0.8,\n//     0.9, 0.2, 0.4,\n//     0.6, 0.6, 0.1\n// ]);\n\n// const positionBuffer = gl.createBuffer()!;\n// gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n// gl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\n\n// const pointSizeBuffer = gl.createBuffer()!;\n// gl.bindBuffer(gl.ARRAY_BUFFER, pointSizeBuffer);\n// gl.bufferData(gl.ARRAY_BUFFER, pointSizeData, gl.STATIC_DRAW);\n\n// const colorBuffer = gl.createBuffer()!;\n// gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n// gl.bufferData(gl.ARRAY_BUFFER, colorData, gl.STATIC_DRAW);\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n// gl.vertexAttribPointer(aPositionLoc, 2, gl.FLOAT, false, 0, 0);\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, pointSizeBuffer);\n// gl.vertexAttribPointer(aPointSizeLoc, 1, gl.FLOAT, false, 0, 0);\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n// gl.vertexAttribPointer(aColorLoc, 3, gl.FLOAT, false, 0, 0);\n\n// Comment any of those 3 lines to see the effect of DEFAULTS above\ngl.enableVertexAttribArray(aPointSizeLoc);\ngl.enableVertexAttribArray(aPositionLoc);\ngl.enableVertexAttribArray(aColorLoc);\n\ngl.drawArrays(gl.POINTS, 0, 6);  // Points sizes controled by third value in buffer data\n// gl.drawArrays(gl.LINE_LOOP, 0, 6); // Will draw a triangle\n// gl.drawArrays(gl.TRIANGLES, 0, 6); // Will draw a filled triangle\n",
    "felix.20241117233253.1": "@others\n",
    "felix.20241117233253.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location = 0) in vec4 aPosition;\nlayout(location = 1) in vec4 aColor;\n\nout vec4 vColor;\n\nvoid main()\n{\n    vColor = aColor;\n    gl_Position = aPosition;\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vColor;\n}`;\n\n",
    "felix.20241117233253.3": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n// For usage with drawArrays\nconst arrayVertexData = new Float32Array([\n    0, 0, 1, 0, 0,\n    0.0, 1.0, 1, 0, 0,\n    0.951, 0.309, 1, 0, 0,\n\n    0, 0, 0, 1, 0,\n    0.951, 0.309, 0, 1, 0,\n    0.587, -0.809, 0, 1, 0,\n\n    0, 0, 0, 0, 1,\n    0.587, -0.809, 0, 0, 1,\n    -0.587, -0.809, 0, 0, 1,\n\n    0, 0, 1, 1, 0,\n    -0.587, -0.809, 1, 1, 0,\n    -0.951, 0.309, 1, 1, 0,\n\n    0, 0, 1, 0, 1,\n    -0.951, 0.309, 1, 0, 1,\n    0.0, 1.0, 1, 0, 1,\n\n]);\n\nconst arrayVertexDataBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, arrayVertexDataBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, arrayVertexData, gl.STATIC_DRAW);\n\n// For usage with drawElements\nconst elementVertexData = new Float32Array([\n    0, 0, 0, 0, 0,\n    0.0, 1.0, 1, 0, 0,\n    0.951, 0.309, 0, 1, 0,\n    0.587, -0.809, 0, 0, 1,\n    -0.587, -0.809, 1, 1, 0,\n    -0.951, 0.309, 1, 0, 1,\n]);\n\nconst elementIndexData = new Uint8Array([\n    0, 1, 2,\n    0, 2, 3,\n    0, 3, 4,\n    0, 4, 5,\n    0, 5, 1,\n]);\n\nconst elementVertexBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, elementVertexBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, elementVertexData, gl.STATIC_DRAW);\n\nconst elementIndexBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementIndexBuffer);\ngl.bufferData(gl.ELEMENT_ARRAY_BUFFER, elementIndexData, gl.STATIC_DRAW);\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, arrayVertexBufferData);\ngl.vertexAttribPointer(0, 2, gl.FLOAT, false, 5 * 4, 0);\ngl.vertexAttribPointer(1, 3, gl.FLOAT, false, 5 * 4, 2 * 4);\n\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\n\n// gl.drawArrays(gl.TRIANGLES, 0, 15);\ngl.drawElements(gl.TRIANGLES, 15, gl.UNSIGNED_BYTE, 0);\n",
    "felix.20241118225644.1": "@others\n",
    "felix.20241118225644.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location=0) in vec4 aPosition;\nlayout(location=1) in vec2 aTexCoord;\n\nout vec2 vTexCoord;\n\nvoid main()\n{\n    vTexCoord = aTexCoord;\n    gl_Position = aPosition;\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec2 vTexCoord;\n\nout vec4 fragColor;\n\nuniform sampler2D uPixelSampler;\nuniform sampler2D uSpriteSampler;\n\nvoid main()\n{\n    // Sample demo mix of textures\n    fragColor = texture(uPixelSampler, vTexCoord) * texture(uSpriteSampler, vTexCoord);\n}`;\n\n// Load image asynchronously\nfunction loadImage(src: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => resolve(image);\n        image.src = src;\n    });\n}\n\n",
    "felix.20241124171038.1": "(async () => {\n\n    @others\n\n})();\n",
    "felix.20241124171224.1": "const canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n",
    "felix.20241118225644.3": "const colors = new Uint8Array([\n    255, 255, 255, 142, 35, 344, 34, 127, 77, 127, 127, 127,\n    90, 212, 222, 43, 212, 122, 33, 22, 11, 213, 17, 78,\n    99, 88, 232, 22, 22, 11, 213, 111, 83, 211, 211, 22,\n    0, 0, 0, 244, 211, 231, 112, 112, 22, 73, 172, 243,\n]);\n\nconst image = await loadImage('images/sprite.png');\n\ngl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\nconst vertexBufferData = new Float32Array([\n    -0.9, -0.9,\n    0.0, 0.9,\n    0.9, -0.9,\n]);\n\nconst texCoordBufferData = new Float32Array([\n    0, 0,\n    0.5, 1,\n    1, 0,\n]);\n\nconst vertexBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertexBufferData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(0);\n\nconst texCoordBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, texCoordBufferData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(1);\n\nconst pixelTextureUnit = 0;\nconst spriteTextureUnit = 5;\n\ngl.uniform1i(gl.getUniformLocation(program, 'uPixelSampler'), pixelTextureUnit);\ngl.uniform1i(gl.getUniformLocation(program, 'uSpriteSampler'), spriteTextureUnit);\n\nconst pixelTexture = gl.createTexture();\ngl.activeTexture(gl.TEXTURE0 + pixelTextureUnit);\ngl.bindTexture(gl.TEXTURE_2D, pixelTexture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 4, 4, 0, gl.RGB, gl.UNSIGNED_BYTE, colors);\n// gl.generateMipmap(gl.TEXTURE_2D);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\nconst spriteTexture = gl.createTexture();\ngl.activeTexture(gl.TEXTURE0 + spriteTextureUnit);\ngl.bindTexture(gl.TEXTURE_2D, spriteTexture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 32, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\n// gl.generateMipmap(gl.TEXTURE_2D);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n// Transparency\ngl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n// Draw call\ngl.drawArrays(gl.TRIANGLES, 0, 3);\n",
    "felix.20241126223424.1": "@others\n\nconst data2 = new Float32Array([\n    -0.8, -0.6, 1.0, 0.25, 0.25, 125,\n    -0.3, -0.6, 0.0, 0.25, 1.0, 32,\n    0.3, -0.6, 0.5, 1.0, 0.25, 75,\n    0.8, -0.6, 0.0, 0.25, 0.25, 9,\n]);\nconst buffer2 = gl.createBuffer()!;\n\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer2);\ngl.bufferData(gl.ARRAY_BUFFER, data2, gl.STATIC_DRAW);\n\ngl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20);\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0);\ngl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8);\n\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\n\ngl.drawArrays(gl.POINTS, 0, 4);\n\n",
    "felix.20241126223424.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location = 0) in float aPointSize;\nlayout(location = 1) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n    vColor = aColor;\n    gl_PointSize = aPointSize;\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vec4(vColor, 1.0);\n}`;\n\n",
    "felix.20241126223424.3": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link program');\n}\n\ngl.useProgram(program);\n\nconst data1 = new Float32Array([\n    -0.8, 0.6, 1.0, 0.75, 0.75, 125,\n    -0.3, 0.6, 0.0, 0.75, 1.0, 32,\n    0.3, 0.6, 0.5, 1.0, 0.75, 75,\n    0.8, 0.6, 0.0, 0.75, 0.75, 9,\n]);\nconst buffer1 = gl.createBuffer()!;\n\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer1);\ngl.bufferData(gl.ARRAY_BUFFER, data1, gl.STATIC_DRAW);\n\ngl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20);\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0);\ngl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8);\n\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\n\ngl.drawArrays(gl.POINTS, 0, 4);\n",
    "felix.20241124205404.1": "@others\n\nconst data2 = new Float32Array([\n    -0.8, -0.6, 1.0, 0.25, 0.25, 125,\n    -0.3, -0.6, 0.0, 0.25, 1.0, 32,\n    0.3, -0.6, 0.5, 1.0, 0.25, 75,\n    0.8, -0.6, 0.0, 0.25, 0.25, 9,\n]);\nconst buffer2 = gl.createBuffer()!;\n\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer2);\ngl.bufferData(gl.ARRAY_BUFFER, data2, gl.STATIC_DRAW);\n\n// Again, no need bind second buffer inside of the VAO, because vertexAttribPointer will do it for us.\nconst vao2 = gl.createVertexArray()!;\ngl.bindVertexArray(vao2);\n\ngl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20); // 20 because last after 5*4\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0); // 0 because those x/y are at start\ngl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8); // 8 because after 2 * 4\n\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\n\ngl.bindVertexArray(null); // Another snapshot has been taken\n\nconst draw = () => {\n    gl.bindVertexArray(vao1);\n    gl.drawArrays(gl.POINTS, 0, 4);\n    gl.bindVertexArray(null);\n\n    gl.bindVertexArray(vao2);\n    gl.drawArrays(gl.POINTS, 0, 4);\n    gl.bindVertexArray(null);\n\n    requestAnimationFrame(draw);\n}\n\ndraw();\n\n// gl.enableVertexAttribArray(0);\n// gl.enableVertexAttribArray(1);\n// gl.enableVertexAttribArray(2);\n\n// gl.drawArrays(gl.POINTS, 0, 4); // Draw the second set of points\n\n// gl.flush(); // Simulate the next frame\n// gl.clear(gl.COLOR_BUFFER_BIT);\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, buffer1); // Have to rebind the buffer\n// gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20);\n// gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0);\n// gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8);\n\n// gl.drawArrays(gl.POINTS, 0, 4); // Draw the first set of points\n\n// gl.bindBuffer(gl.ARRAY_BUFFER, buffer2);\n// gl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20);\n// gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0);\n// gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8);\n\n// gl.drawArrays(gl.POINTS, 0, 4); // Draw the second set of points\n",
    "felix.20241124205404.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location = 0) in float aPointSize;\nlayout(location = 1) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n    vColor = aColor;\n    gl_PointSize = aPointSize;\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vec4(vColor, 1.0);\n}`;\n\n",
    "felix.20241124205404.3": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link program');\n}\n\ngl.useProgram(program);\n\nconst data1 = new Float32Array([\n    -0.8, 0.6, 1.0, 0.75, 0.75, 125,\n    -0.3, 0.6, 0.0, 0.75, 1.0, 32,\n    0.3, 0.6, 0.5, 1.0, 0.75, 75,\n    0.8, 0.6, 0.0, 0.75, 0.75, 9,\n]);\nconst buffer1 = gl.createBuffer()!;\n\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer1);\ngl.bufferData(gl.ARRAY_BUFFER, data1, gl.STATIC_DRAW);\n\n// No need to bindBuffer inside of the VAO, because vertexAttribPointer will do it for us.\nconst vao1 = gl.createVertexArray()!;\ngl.bindVertexArray(vao1);\n\ngl.vertexAttribPointer(0, 1, gl.FLOAT, false, 24, 20);\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 0);\ngl.vertexAttribPointer(2, 3, gl.FLOAT, false, 24, 8);\n\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\n\ngl.bindVertexArray(null); // Snapshot has been taken\n",
    "felix.20241201235534.1": "@others\n",
    "felix.20241201235534.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location=0) in vec4 aPosition;\nlayout(location=1) in vec2 aTexCoord;\n\nout vec2 vTexCoord;\n\nvoid main()\n{\n    vTexCoord = aTexCoord;\n    gl_Position = aPosition;\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nuniform sampler2D uSampler;\n\nin vec2 vTexCoord;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    // Sample demo mix of textures\n    fragColor = texture(uSampler, vTexCoord);\n}`;\n\n// Load image asynchronously\nfunction loadImage(src: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => resolve(image);\n        image.src = src;\n    });\n}\n\nfunction getSpriteUV(sprite: number, orientation: number): [number, number, number, number, number, number, number, number, number, number, number, number] {\n\n    const h = 64 / 4096;\n    const w = 64 / 4096;\n\n    // The sprite number (0 to 255) is the index of the 64x64 sprite in the 1024x1024 sprite sub-sheet\n    // The orientation is the index (0 to 15) of the 1024x1024 sprite sub-sheet in the 4096x4096 sprite sheet.\n\n    // Calculate in the 1024x1024 sprite sub-sheet and \n    // add the offset of the 1024x1024 sprite sub-sheet in the 4096x4096 sprite sheet\n    const u = ((sprite % 16) * w) + (orientation % 4) * 0.25;\n    const v = (Math.floor(sprite / 16) * h) + Math.floor(orientation / 4) * 0.25;\n\n    return [\n        u, v + h,\n        u + w, v,\n        u, v,\n\n        u, v + h,\n        u + w, v + h,\n        u + w, v\n\n    ];\n}\n\n",
    "felix.20241201235534.3": "(async () => {\n\n    @others\n\n})();\n",
    "felix.20241201235534.4": "const canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\nconst positionData = new Float32Array([\n    // Quad 1\n    -1, 0,\n    0, 1,\n    -1, 1,\n    -1, 0,\n    0, 0,\n    0, 1,\n    // Quad 2\n    0, 0,\n    1, 1,\n    0, 1,\n    0, 0,\n    1, 0,\n    1, 1,\n    // Quad 3\n    -1, -1,\n    0, 0,\n    -1, 0,\n    -1, -1,\n    0, -1,\n    0, 0,\n    // Quad 4\n    0, -1,\n    1, 0,\n    0, 0,\n    0, -1,\n    1, -1,\n    1, 0,\n]);\n\n",
    "felix.20241201235534.5": "const image = await loadImage('images/alien.png');\n\n// Flip Y not needed?\n// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\nconst positionBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\ngl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(0);\n\nconst texCoordData = new Float32Array(2 * 4 * 6);\nconst texCoordBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, texCoordData.byteLength, gl.DYNAMIC_DRAW);\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(1);\n\n// Set texture\ntexCoordData.set(getSpriteUV(120, 15), 0);\ntexCoordData.set(getSpriteUV(120, 0), 12);\ntexCoordData.set(getSpriteUV(120, 1), 24);\ntexCoordData.set(getSpriteUV(120, 2), 36);\ngl.bufferSubData(gl.ARRAY_BUFFER, 0, texCoordData);\n\nconst texture = gl.createTexture()!;\ngl.bindTexture(gl.TEXTURE_2D, texture);\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 4096, 4096, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\ngl.generateMipmap(gl.TEXTURE_2D);\n\n// Transparency\ngl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n// Draw call\ngl.drawArrays(gl.TRIANGLES, 0, 24);\n",
    "felix.20241126234030.1": "@others\n\n",
    "felix.20241128003559.1": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location=0) in vec4 aPosition;\nlayout(location=1) in vec2 aTexCoord;\nlayout(location=2) in float aDepth;\n\nout vec2 vTexCoord;\nout float vDepth;\n\nvoid main()\n{\n    vTexCoord = aTexCoord;\n    vDepth = aDepth;\n    gl_Position = aPosition;\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nuniform mediump sampler2DArray uSampler;\n\nin vec2 vTexCoord;\nin float vDepth;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = texture(uSampler, vec3(vTexCoord, vDepth));\n}`;\n\n// Load image asynchronously\nfunction loadImage(src: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.onload = () => resolve(image);\n        image.src = src;\n        console.log(image.width, image.height);\n    });\n}\n\n",
    "felix.20241128003543.1": "(async () => {\n\n    @others\n\n})();\n",
    "felix.20241128003543.2": "const canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconsole.log(gl.getParameter(gl.MAX_TEXTURE_SIZE));\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n",
    "felix.20241128003543.3": "// * Start Program *\n\n// const image = await loadImage('images/alien-vertical.png');\nconst image = await loadImage('images/alien-vertical.png'); // TOO BIG !\n\nconst texture = gl.createTexture()!;\ngl.bindTexture(gl.TEXTURE_2D_ARRAY, texture);\ngl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, 64, 64, 256, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\ngl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n// Transparency\ngl.enable(gl.BLEND);\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n// Draw call\ngl.drawArrays(gl.TRIANGLES, 0, 3);\n",
    "felix.20241113233458.1": "@others\n"
  }
}