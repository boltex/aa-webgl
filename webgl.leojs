{
  "leoHeader": {
    "fileFormat": 2
  },
  "vnodes": [
    {
      "gnx": "felix.20241113233438.1",
      "vh": "Introduction"
    },
    {
      "gnx": "felix.20241116232514.1",
      "vh": "Chapter3 Uniforms",
      "children": [
        {
          "gnx": "felix.20241113235415.1",
          "vh": "gl sources"
        },
        {
          "gnx": "felix.20241113235430.1",
          "vh": "main"
        }
      ]
    },
    {
      "gnx": "felix.20241116232737.1",
      "vh": "Chapter4 Attributes",
      "children": [
        {
          "gnx": "felix.20241116232737.2",
          "vh": "gl sources"
        },
        {
          "gnx": "felix.20241116232737.3",
          "vh": "main"
        }
      ]
    },
    {
      "gnx": "felix.20241113233458.1",
      "vh": "@clean src/main.ts",
      "children": [
        {
          "gnx": "felix.20241116232737.1"
        }
      ]
    }
  ],
  "tnodes": {
    "felix.20241113233438.1": "Andrew Adamson WebGL tutorials\n\nhttps://www.youtube.com/watch?v=-T6EbWCq99c&list=PLPbmjY2NVO_X1U1JzLxLDdRn4NmtxyQQo\n\n",
    "felix.20241116232514.1": "@others\n",
    "felix.20241113235415.1": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nuniform float uPointSize;\nuniform vec2 uPosition;\n\nvoid main()\n{\n    gl_PointSize = uPointSize;\n    gl_Position = vec4(uPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nout vec4 fragColor;\n\nuniform int uIndex;\nuniform vec4 uColors[3];\n\nvoid main()\n{\n    fragColor = uColors[uIndex];\n}`;\n\n",
    "felix.20241113235430.1": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n// VERTEX SHADER -> Get position and pont size uniforms locations and set their values\nconst uPositionLoc = gl.getUniformLocation(program, 'uPosition')!;\ngl.uniform2f(uPositionLoc, -0.3, 0.0);\n\nconst uPointSizeLoc = gl.getUniformLocation(program, 'uPointSize')!;\ngl.uniform1f(uPointSizeLoc, 100.0);\n\n// FRAGMENT SHADER -> Get index and colors uniforms locations and set their values\nconst uIndexLoc = gl.getUniformLocation(program, 'uIndex')!;\nconst uColorsLoc = gl.getUniformLocation(program, 'uColors')!;\n\ngl.uniform1i(uIndexLoc, 2);\ngl.uniform4fv(uColorsLoc, [\n    1.0, 0.0, 0.0, 1.0,\n    0.0, 1.0, 0.0, 1.0,\n    1.0, 0.0, 1.0, 1.0,\n]);\n\ngl.drawArrays(gl.POINTS, 0, 1);\n",
    "felix.20241116232737.1": "@others\n",
    "felix.20241116232737.2": "// VERTEX SHADER\nconst vertexShaderSource = /*glsl*/ `#version 300 es\n\nlayout(location = 1) in float aPointSize;\nlayout(location = 0) in vec2 aPosition;\nlayout(location = 2) in vec3 aColor;\n\nout vec3 vColor;\n\nvoid main()\n{\n    vColor = aColor;\n    gl_PointSize = aPointSize;\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}`;\n\n// FRAGMENT SHADER\nconst fragmentShaderSource = /*glsl*/ `#version 300 es\n\nprecision mediump float;\n\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main()\n{\n    fragColor = vec4(vColor, 1.0);\n}`;\n\n",
    "felix.20241116232737.3": "// Start\nconst canvas = document.querySelector('canvas')!;\nconst gl = canvas.getContext('webgl2')!;\n\nconst program = gl.createProgram()!;\n\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, vertexShaderSource);\ngl.compileShader(vertexShader);\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, fragmentShaderSource);\ngl.compileShader(fragmentShader);\ngl.attachShader(program, fragmentShader);\n\ngl.linkProgram(program);\n\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n    console.log(gl.getProgramInfoLog(program));\n}\n\ngl.useProgram(program);\n\n// Attributes\nconst aPositionLoc = 0;\nconst aPointSizeLoc = 1;\nconst aColorLoc = 2;\n\ngl.vertexAttrib4f(aPositionLoc, 0, 0, 0, 1); // DEFAULT LOCATION\ngl.vertexAttrib1f(aPointSizeLoc, 50); // DEFAULT POINT SIZE\ngl.vertexAttrib4f(aColorLoc, 1, 0, 0, 1); // DEFAULT COLOR (RED)\n\n// * ALL IN SAME BUFFER *\n// Buffer: position x, position y, and point size\n// const bufferData = new Float32Array([\n//     -0.3, 0.5, 100, 1, 0, 0,\n//     0.3, -0.5, 10, 0, 1, 0,\n//     0.8, 0.8, 50, 0, 0, 1\n// ]);\n// const buffer = gl.createBuffer()!;\n\n// Bind buffer\n// gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n// gl.bufferData(gl.ARRAY_BUFFER, bufferData, gl.STATIC_DRAW);\n\n// Bind attributes: Match the layout in the buffer data\n// gl.vertexAttribPointer(aPositionLoc, 2, gl.FLOAT, false, 6 * 4, 0);\n// gl.vertexAttribPointer(aPointSizeLoc, 1, gl.FLOAT, false, 6 * 4, 2 * 4);\n// gl.vertexAttribPointer(aColorLoc, 3, gl.FLOAT, false, 6 * 4, 3 * 4);\n\n// * SEPARATE BUFFERS *\nconst positionData = new Float32Array([\n    -0.3, 0.5,\n    0.3, -0.5,\n    0.8, 0.8\n]);\nconst pointSizeData = new Float32Array([\n    100,\n    10,\n    50\n]);\nconst colorData = new Float32Array([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1\n]);\n\nconst positionBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, positionData, gl.STATIC_DRAW);\n\nconst pointSizeBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, pointSizeBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, pointSizeData, gl.STATIC_DRAW);\n\nconst colorBuffer = gl.createBuffer()!;\ngl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, colorData, gl.STATIC_DRAW);\n\n\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\ngl.vertexAttribPointer(aPositionLoc, 2, gl.FLOAT, false, 0, 0);\n\ngl.bindBuffer(gl.ARRAY_BUFFER, pointSizeBuffer);\ngl.vertexAttribPointer(aPointSizeLoc, 1, gl.FLOAT, false, 0, 0);\n\ngl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\ngl.vertexAttribPointer(aColorLoc, 3, gl.FLOAT, false, 0, 0);\n\n// Comment any of those 3 lines to see the effect of DEFAULTS above\ngl.enableVertexAttribArray(aPointSizeLoc);\ngl.enableVertexAttribArray(aPositionLoc);\ngl.enableVertexAttribArray(aColorLoc);\n\ngl.drawArrays(gl.POINTS, 0, 3);  // Points sizes controled by third value in buffer data\n// gl.drawArrays(gl.LINE_LOOP, 0, 3); // Will draw a triangle\n// gl.drawArrays(gl.TRIANGLES, 0, 3); // Will draw a filled triangle\n",
    "felix.20241113233458.1": "@others\n"
  }
}